name: CI
on:
  pull_request:
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read
  pull-requests: write
jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      kube: ${{ steps.path-filter.outputs.kube }}
      tf: ${{ steps.path-filter.outputs.tf }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/bot-filter
        id: bot-filter
        with:
          input: ${{ github.actor }}
      - uses: dorny/paths-filter@v3
        if: steps.bot-filter.outputs.is_bot == 'false'
        id: path-filter
        with:
          filters: |
            kube:
              - "kubernetes/**"
              - ".github/workflows/ci.yaml"
            tf:
              - "terraform/**"
              - ".github/workflows/ci.yaml"
  # kubeconform:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: yokawasa/action-setup-kube-tools@v0.9.2
  #       with:
  #         setup-tools: |
  #           kubeconform
  #           kustomize
  #         kubeconform: "0.6.6"
  #         kustomize: "5.4.1"
  #     - run: |
  #         for APP in $(ls kubernetes/apps/)
  #         do
  #           kustomize build kubernetes/apps/$APP |
  #           kubeconform -summary \
  #           -schema-location default \
  #           -schema-location 'https://raw.githubusercontent.com/piny940/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
  #           -output json
  #         done
  kube-yamlfmt:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.kube == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "^1.22.1"
      - name: Install yamlfmt
        run: go install github.com/google/yamlfmt/cmd/yamlfmt@latest
      - name: Yamlfmt
        run: yamlfmt -lint kubernetes/
  kube-flux:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.kube == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd kubernetes/
          before=$(ls _flux/**/*)
          bash scripts/flux-kustomize.sh
          after=$(ls _flux/**/*)
          diff=$(diff <(echo ${before}) <(echo ${after}))
          if [ -z "$diff" ]; then
            echo "No changes detected"
            exit 0
          else
            echo "Changes detected"
            exit 1
          fi

  tf-format:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.tf == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
      - name: Terraform fmt
        run: terraform fmt -check -recursive
  tf-plan:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.tf == 'true' && github.event_name == 'pull_request'
    strategy:
      matrix:
        env: [staging, production]
    environment: ${{ matrix.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - id: "gcp-auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT }}
          create_credentials_file: true
          workload_identity_provider: "projects/${{ vars.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/pool/providers/terraform-github-actions"
          service_account: "terraform-github-actions@${{ vars.GCP_PROJECT }}.iam.gserviceaccount.com"
      - name: Terraform Init
        run: cd terraform/${{ matrix.env }} && terraform init
      - name: Terraform Plan
        run: cd terraform/${{ matrix.env }} && terraform plan -no-color -input=false > plan.txt
        continue-on-error: true
      - name: Create Message
        id: CreateMessage
        run: |
          cd terraform/${{ matrix.env }}
          result=$(cat plan.txt)
          pattern="Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy"
          {
            echo "comment<<EOF"
            if [[ ${result} =~ ${pattern} ]]; then
              summary=$(echo "$result" | grep -oE "$pattern")
              printf "# Terraform plan for ${{ matrix.env }}\n\n"
              printf "\`\`\`\n"
              printf "$summary\n"
              printf "\`\`\`\n\n"
              printf "<details>\n"
              printf "<summary>Terraform Plan Details</summary>\n\n"
              printf "\`\`\`\n"
              printf "$result\n"
              printf "\`\`\`\n\n"
              printf "</details>\n"

              if [[ ${{ matrix.env }} == 'staging' ]]; then
                printf "Please apply the changes to the staging environment using the [Terraform apply workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/tf-apply.yaml)\n"
              fi
            else
              printf "# Terraform plan for ${{ matrix.env }}\n\n"
              printf "\`\`\`\n"
              printf "$result\n"
              printf "\`\`\`\n"
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"
      - name: Comment PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Terraform Plan for ${{ matrix.env }}
          message: ${{ env.comment }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
