name: Staging Deploy
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: read
  packages: write

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      kube: ${{ steps.path-filter.outputs.kube }}
      svcmtr: ${{ steps.path-filter.outputs.svcmtr }}
      tf: ${{ steps.path-filter.outputs.tf }}
      fluxupd: ${{ steps.path-filter.outputs.fluxupd }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/bot-filter
        id: bot-filter
        with:
          actor: ${{ github.actor }}
      - uses: dorny/paths-filter@v3
        if: steps.bot-filter.outputs.is-bot == 'false'
        id: path-filter
        with:
          filters: |
            kube:
              - "kubernetes/**"
              - ".github/workflows/stg-deploy.yaml"
            svcmtr:
              - "service-monitor/**"
              - ".github/workflows/stg-deploy.yaml"
            tf:
              - "terraform/**"
              - ".github/workflows/stg-deploy.yaml"
            fluxupd:
              - "flux-target-updater/**"
              - ".github/workflows/stg-deploy.yaml"
  kube:
    runs-on: ubuntu-latest
    environment: staging
    needs: filter
    if: needs.filter.outputs.kube == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Get current branch
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi
        id: get-branch
      - name: Set flux branch to current branch
        id: set-flux-branch
        run: |
          curl --request POST \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.FLUX_TARGET_UPDATER_TOKEN }}' \
            --data '{
                "ref": "${{ steps.get-branch.outputs.branch }}",
                "name": "apps-git",
                "namespace": "flux-system"
            }' \
            https://stg-flux-target-updater.piny940.com/branch
      - name: Create link
        run: |
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            echo "link=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          else
            eco "link=${{ github.event.repository.html_url }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
        id: create-link
      - name: notify success to slack
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "attachments": [{
                "color": "#36d399",
                "blocks": [{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Successfully switched target branch to `${{ steps.get-branch.outputs.branch }}` : <${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.create-link.outputs.link }}>"
                  }
                }]
              }]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFIER_TOKEN }}

  service-monitor:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.svcmtr == 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_UPDATE_HEALTH_CHECK_ARN }}
          role-session-name: GitHubActions
      - name: get-caller-identity is allowed to run on role.
        run: aws sts get-caller-identity
      - name: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          cd service-monitor && pip3 install -r requirements.txt -t .
      - name: lambda update
        run: |
          pip3 install awscli
          cd service-monitor && zip -r package.zip ./*
          aws lambda update-function-code --function-name stgCheckHealthiness --zip-file fileb://package.zip --publish

  fluxupd:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.fluxupd == 'true'
    steps:
      - name: Get current datetime
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: Check out
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          push: true
          context: ./flux-target-updater
          file: ./flux-target-updater/Dockerfile
          tags: |
            ghcr.io/piny940/flux-target-updater:main-${{ github.sha }}-${{ env.TIMESTAMP }}
